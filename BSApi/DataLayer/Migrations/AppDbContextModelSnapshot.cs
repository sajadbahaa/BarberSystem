// <auto-generated />
using System;
using DTLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.ApplicationsHistory", b =>
                {
                    b.Property<int>("HistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryID"));

                    b.Property<int>("ApplicationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .HasColumnType("Nvarchar");

                    b.Property<byte>("Status")
                        .HasColumnType("TINYINT");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("HistoryID");

                    b.HasIndex("ApplicationID");

                    b.HasIndex("UserID");

                    b.ToTable("applicationsHistory");
                });

            modelBuilder.Entity("DataLayer.Entities.BarberApplications", b =>
                {
                    b.Property<int>("ApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationID"));

                    b.Property<string>("CopyFirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Nvarchar");

                    b.Property<string>("CopyLastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Nvarchar");

                    b.Property<string>("CopyPhone")
                        .HasMaxLength(12)
                        .HasColumnType("varchar");

                    b.Property<string>("CopySecondName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Nvarchar");

                    b.Property<DateOnly>("CreatAt")
                        .HasColumnType("Date");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Nvarchar");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(100)
                        .HasColumnType("Nvarchar");

                    b.Property<string>("Shop")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Nvarchar");

                    b.Property<byte>("Status")
                        .HasColumnType("TINYINT");

                    b.Property<DateOnly?>("UpdateAt")
                        .HasColumnType("Date");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ApplicationID");

                    b.HasIndex("PersonID")
                        .IsUnique()
                        .HasFilter("[PersonID] IS NOT NULL");

                    b.HasIndex("UserID");

                    b.ToTable("BarberApplications");
                });

            modelBuilder.Entity("DataLayer.Entities.BarberServices", b =>
                {
                    b.Property<int>("BarberServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BarberServiceID"));

                    b.Property<int>("BarberID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("ServiceDetilasID")
                        .HasColumnType("smallint");

                    b.HasKey("BarberServiceID");

                    b.HasIndex("ServiceDetilasID");

                    b.HasIndex("BarberID", "ServiceDetilasID")
                        .IsUnique();

                    b.ToTable("barberServices");
                });

            modelBuilder.Entity("DataLayer.Entities.Barbers", b =>
                {
                    b.Property<int>("BarberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BarberID"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Nvarchar");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Nvarchar");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("BarberID");

                    b.HasIndex("PersonID")
                        .IsUnique();

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("barbers");
                });

            modelBuilder.Entity("DataLayer.Entities.Customers", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.HasIndex("PersonID")
                        .IsUnique();

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DataLayer.Entities.People", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"));

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Nvarchar");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Nvarchar");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .HasColumnType("varchar");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Nvarchar");

                    b.HasKey("PersonID");

                    b.ToTable("People");
                });

            modelBuilder.Entity("DataLayer.Entities.ServicesDetials", b =>
                {
                    b.Property<short>("ServiceDetilasID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("ServiceDetilasID"));

                    b.Property<short>("ServiceID")
                        .HasColumnType("smallint");

                    b.Property<short>("SpecilityID")
                        .HasColumnType("smallint");

                    b.HasKey("ServiceDetilasID");

                    b.HasIndex("ServiceID")
                        .IsUnique();

                    b.HasIndex("SpecilityID");

                    b.ToTable("ServicesDetials");
                });

            modelBuilder.Entity("DataLayer.Entities.Servics", b =>
                {
                    b.Property<short>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("ServiceID"));

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Nvarchar");

                    b.Property<TimeSpan>("duration")
                        .HasColumnType("time");

                    b.Property<decimal>("price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ServiceID");

                    b.ToTable("servics");
                });

            modelBuilder.Entity("DataLayer.Entities.Speclitys", b =>
                {
                    b.Property<short>("SpecilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("SpecilityID"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("Nvarchar");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("SpecilityName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Nvarchar");

                    b.HasKey("SpecilityID");

                    b.ToTable("Speclitys");
                });

            modelBuilder.Entity("DataLayer.Entities.TempBarberServices", b =>
                {
                    b.Property<int>("TempServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TempServiceID"));

                    b.Property<int>("ApplicationID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("ServiceDetilasID")
                        .HasColumnType("smallint");

                    b.HasKey("TempServiceID");

                    b.HasIndex("ServiceDetilasID");

                    b.HasIndex("ApplicationID", "ServiceDetilasID")
                        .IsUnique();

                    b.ToTable("TempBarberServices");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.ApplicationsHistory", b =>
                {
                    b.HasOne("DataLayer.Entities.BarberApplications", "BarberApplication")
                        .WithMany("applicationsHistories")
                        .HasForeignKey("ApplicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.AppUser", "user")
                        .WithMany("applicationsHistories")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BarberApplication");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DataLayer.Entities.BarberApplications", b =>
                {
                    b.HasOne("DataLayer.Entities.People", "person")
                        .WithOne("BarberApplications")
                        .HasForeignKey("DataLayer.Entities.BarberApplications", "PersonID");

                    b.HasOne("DataLayer.Entities.AppUser", "user")
                        .WithMany("barberApplications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("person");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DataLayer.Entities.BarberServices", b =>
                {
                    b.HasOne("DataLayer.Entities.Barbers", "barbers")
                        .WithMany("BarberServices")
                        .HasForeignKey("BarberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.ServicesDetials", "ServicesDetials")
                        .WithMany("BarberServices")
                        .HasForeignKey("ServiceDetilasID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServicesDetials");

                    b.Navigation("barbers");
                });

            modelBuilder.Entity("DataLayer.Entities.Barbers", b =>
                {
                    b.HasOne("DataLayer.Entities.People", "people")
                        .WithOne("Barbers")
                        .HasForeignKey("DataLayer.Entities.Barbers", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.AppUser", "user")
                        .WithOne("Barbers")
                        .HasForeignKey("DataLayer.Entities.Barbers", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("people");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DataLayer.Entities.Customers", b =>
                {
                    b.HasOne("DataLayer.Entities.People", "person")
                        .WithOne("Customer")
                        .HasForeignKey("DataLayer.Entities.Customers", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.AppUser", "user")
                        .WithOne("Customers")
                        .HasForeignKey("DataLayer.Entities.Customers", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("person");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DataLayer.Entities.ServicesDetials", b =>
                {
                    b.HasOne("DataLayer.Entities.Servics", "servics")
                        .WithOne("servicesDetials")
                        .HasForeignKey("DataLayer.Entities.ServicesDetials", "ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Speclitys", "Speclitys")
                        .WithMany("ServicesDetials")
                        .HasForeignKey("SpecilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ServicesDetials_Speclitys_SpecilityID");

                    b.Navigation("Speclitys");

                    b.Navigation("servics");
                });

            modelBuilder.Entity("DataLayer.Entities.TempBarberServices", b =>
                {
                    b.HasOne("DataLayer.Entities.BarberApplications", "barberApplication")
                        .WithMany("TempBarberServices")
                        .HasForeignKey("ApplicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.ServicesDetials", "servicesDetials")
                        .WithMany("TempBarberServices")
                        .HasForeignKey("ServiceDetilasID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("barberApplication");

                    b.Navigation("servicesDetials");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DataLayer.Entities.AppUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Entities.AppUser", b =>
                {
                    b.Navigation("Barbers");

                    b.Navigation("Customers");

                    b.Navigation("UserRoles");

                    b.Navigation("applicationsHistories");

                    b.Navigation("barberApplications");
                });

            modelBuilder.Entity("DataLayer.Entities.BarberApplications", b =>
                {
                    b.Navigation("TempBarberServices");

                    b.Navigation("applicationsHistories");
                });

            modelBuilder.Entity("DataLayer.Entities.Barbers", b =>
                {
                    b.Navigation("BarberServices");
                });

            modelBuilder.Entity("DataLayer.Entities.People", b =>
                {
                    b.Navigation("BarberApplications");

                    b.Navigation("Barbers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DataLayer.Entities.ServicesDetials", b =>
                {
                    b.Navigation("BarberServices");

                    b.Navigation("TempBarberServices");
                });

            modelBuilder.Entity("DataLayer.Entities.Servics", b =>
                {
                    b.Navigation("servicesDetials")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Entities.Speclitys", b =>
                {
                    b.Navigation("ServicesDetials");
                });
#pragma warning restore 612, 618
        }
    }
}
